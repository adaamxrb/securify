import { useState } from 'react';

function Pentest() {
	const [domain, setDomain] = useState('');
	const [dnsResult, setDnsResult] = useState(null);
	const [subdomainResult, setSubDomainResult] = useState(null);
	const [nmapResult, setNmapResult] = useState(null);
	const [isMutating, setIsMutating] = useState(false);

	const encodeBase64 = (str) => {
		return btoa(str);
	};

	const decodeBase64 = (encodedStr) => {
		return atob(encodedStr);
	};

	const handleNslookup = async () => {
		setIsMutating(true);
		try {
			const encodedDomain = encodeBase64(domain);
			const response = await fetch('http://localhost:5000/nslookup', {
				method: 'POST',
				headers: {
					'Content-Type': 'application/json',
				},
				body: JSON.stringify({ domain: encodedDomain }),
			});
			const jsonData = await response.json();
			const decodedResult = {
				...jsonData,
				result: jsonData.result ? decodeBase64(jsonData.result) : null,
			};
			setDnsResult(decodedResult);
		} catch (error) {
			console.error('Error fetching DNS lookup:', error);
		}
		setIsMutating(false);
	};

	const handleSubDomain = async () => {
		setIsMutating(true);
		try {
			const encodedDomain = encodeBase64(domain);
			const response = await fetch('http://localhost:5000/subdomains', {
				method: 'POST',
				headers: {
					'Content-Type': 'application/json',
				},
				body: JSON.stringify({ domain: encodedDomain }),
			});
			const jsonData = await response.json();
			const decodedSubdomains = {
				...jsonData,
				subdomains: jsonData.subdomains.map((subdomain) =>
					decodeBase64(subdomain)
				),
			};
			setSubDomainResult(decodedSubdomains);
		} catch (error) {
			console.error('Error fetching Subdomains lookup:', error);
		}
		setIsMutating(false);
	};

	const handleNmapScan = async () => {
		setIsMutating(true);
		try {
			const encodedDomain = encodeBase64(domain);
			const response = await fetch('http://localhost:5000/nmap', {
				method: 'POST',
				headers: {
					'Content-Type': 'application/json',
				},
				body: JSON.stringify({ domain: encodedDomain }),
			});
			const jsonData = await response.json();
			const decodedResult = {
				...jsonData,
				result: jsonData.result.map((item) => ({
					...item,
					service: decodeBase64(item.service),
				})),
			};
			setNmapResult(decodedResult);
		} catch (error) {
			console.error('Error fetching Nmap scan:', error);
		}
		setIsMutating(false);
	};

	return (
		<div>
			<h1>Website App Scanner</h1>
			<div id="nslookup">
				<div className="mb-3">
					<label htmlFor="domain" className="form-label">
						Masukkan domain:
					</label>
					<input
						type="text"
						id="domain"
						className="form-control"
						value={domain}
						onChange={(e) => setDomain(e.target.value)}
					/>
				</div>
				<div className="d-flex flex-wrap gap-2 mb-3">
					{!isMutating ? (
						<button
							className="btn btn-warning"
							onClick={handleNslookup}>
							DNS Lookup
						</button>
					) : (
						<button
							disabled
							className="btn btn-danger placeholder-wave">
							<div class="d-flex align-items-center gap-2">
								<div
									class="spinner-border spinner-border-sm ms-auto"
									aria-hidden="true"></div>
								<strong role="status">Loading...</strong>
							</div>
						</button>
					)}
					{!isMutating ? (
						<button
							className="btn btn-warning"
							onClick={handleSubDomain}>
							Subdomain
						</button>
					) : (
						<button
							disabled
							className="btn btn-danger placeholder-wave">
							<div class="d-flex align-items-center gap-2">
								<div
									class="spinner-border spinner-border-sm ms-auto"
									aria-hidden="true"></div>
								<strong role="status">Loading...</strong>
							</div>
						</button>
					)}
					{!isMutating ? (
						<button
							className="btn btn-warning"
							onClick={handleNmapScan}>
							Nmap Scan
						</button>
					) : (
						<button
							disabled
							className="btn btn-danger placeholder-wave">
							<div className="d-flex align-items-center gap-2">
								<div
									className="spinner-border spinner-border-sm ms-auto"
									aria-hidden="true"></div>
								<strong role="status">Loading...</strong>
							</div>
						</button>
					)}
				</div>
				{dnsResult && (
					<div>
						<h2>DNS Lookup Result:</h2>
						{dnsResult.error ? (
							<p>{dnsResult.error}</p>
						) : (
							<pre>Result: {dnsResult.result}</pre>
						)}
					</div>
				)}
				{subdomainResult && (
					<div>
						<h2>Subdomain Result:</h2>
						{subdomainResult.error ? (
							<p>{subdomainResult.error}</p>
						) : (
							<div>
								<p>Subdomains found:</p>
								<div className="d-flex flex-wrap">
									{subdomainResult.subdomains.map(
										(subdomain, index) => (
											<li className="p-2" key={index}>
												{subdomain}
											</li>
										)
									)}
								</div>
							</div>
						)}
					</div>
				)}

				{nmapResult && (
					<div>
						<h2>Nmap Scan Result:</h2>
						{nmapResult.error ? (
							<p>{nmapResult.error}</p>
						) : (
							<table className="table table-striped table-hover table-dark">
								<thead>
									<tr>
										<th scope="col">Port</th>
										<th scope="col">State</th>
										<th scope="col">Service</th>
									</tr>
								</thead>
								<tbody className="table-group-divider">
									{nmapResult.result.map((item, index) => (
										<tr key={index}>
											<td>{item.port}</td>
											<td>{item.state}</td>
											<td>{item.service}</td>
										</tr>
									))}
								</tbody>
							</table>
						)}
					</div>
				)}
			</div>
		</div>
	);
}

export default Pentest;
